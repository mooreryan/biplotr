% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/biplot.R
\name{pca_biplot}
\alias{pca_biplot}
\title{Make the snazziest of biplots!}
\usage{
pca_biplot(data, center_data = TRUE, scale_data = FALSE,
  data_projection = "pc_scores", variable_projection = "loadings",
  chart_title = FALSE, xaxis_pc = 1, yaxis_pc = 2,
  limits_nudge_x = 0, limits_nudge_y = 0, points = TRUE,
  point_labels = FALSE, point_label_size = 3.5,
  point_labels_nudge_y = 0.5, arrows = TRUE, arrow_labels = FALSE,
  arrow_labels_nudge_y = 0.5, arrow_label_size = 3.5,
  arrow_legend = FALSE, use_ggrepel = FALSE)
}
\arguments{
\item{data}{A matrix or data.frame of your data.  Rows will be points, columns will be vectors.}

\item{center_data}{This is an important step for PCA!  Just leave it as \code{TRUE} unless you really know what you're doing.}

\item{scale_data}{You might want to scale your data if the magnitude of your predictor variables is highly variable, otherwise variables whose magnitude is much larger than the rest of the variables will likely dominate other variables.  On the other hand, this might be what you want.  It's up to you! (Note that you can not use scale if one of your variables is constant or zero.)}

\item{data_projection}{How do you want to project your data?  Options include "pc_scores" (projections of data into PC space aka principal components) and "pc_scores_scaled" (the same scores, but scaled to unit variance).}

\item{variable_projection}{How do you want to project your variables?  Options include "loadings" (the variable loadings) and "axes" (the principal axes).}

\item{chart_title}{Title of the chart.}

\item{xaxis_pc}{Principal component to map to the x-axis.}

\item{yaxis_pc}{Principal component to map to the y-axis.}

\item{limits_nudge_x}{Add this value to both ends of the x-axis (can be negative!).  If the original axis would run from -5 to 5, and you use a value of 1 for this parameter, then the axis will be shown running from -6 to 6 instead.  If you use a -2 here, then the axis will run from -3 to 3 instead of -5 to 5.}

\item{limits_nudge_y}{Add this value to both ends of the y-axis (can be negative!).  See limits_nudge_x for more info.}

\item{points}{Do you want to draw the points?}

\item{point_labels}{Do you want to label the points?}

\item{point_label_size}{How big do you want the labels?}

\item{point_labels_nudge_y}{Use this param to specify the amount to nudge the point label away from the point in the y direction.}

\item{arrows}{Do you want to draw the arrows?}

\item{arrow_labels}{Do you want to label the arrows?}

\item{arrow_labels_nudge_y}{How big do you want labels?}

\item{arrow_label_size}{Use this param to specify the amount to nudge the arrow label away from the tip of the arrow in the y direction.}

\item{arrow_legend}{Put a snazzy legend to the side instead of labeling individual arrows.}

\item{use_ggrepel}{Set this to TRUE if you want to let ggrepel decide where the labels should go.  If you use this option the label nudge options will be ignored.}
}
\value{
A list with attributes biplot and pca.
}
\description{
\code{pca_biplot} makes a beautiful biplot of your data, automagically!
}
\details{
TODO:  write a longer description of how I work here!
}
\examples{
# Using the famous Iris dataset to show a couple of the biplot combinations you can make.
library(ggplot2)
library(ggrepel)
library(grid)
library(gridExtra)
library(biplotr)

dat <- iris[, 1:4]

loadings_scores <- pca_biplot(data = dat,
                              center_data = TRUE,
                              scale_data = FALSE,
                              chart_title = "Iris data",
                              limits_nudge_y = 0,
                              data_projection = "pc_scores",
                              variable_projection = "loadings",
                              arrow_labels = TRUE)

axes_scores <- pca_biplot(data = dat,
                          center_data = TRUE,
                          scale_data = FALSE,
                          chart_title = "Iris data",
                          limits_nudge_y = 0,
                          data_projection = "pc_scores",
                          variable_projection = "axes",
                          arrow_labels = TRUE)

loadings_scores_scaled <- pca_biplot(data = dat,
                                     center_data = TRUE,
                                     scale_data = FALSE,
                                     chart_title = "Iris data",
                                     limits_nudge_y = 0,
                                     data_projection = "pc_scores_scaled",
                                     variable_projection = "loadings",
                                     arrow_labels = TRUE)

axes_scores_scaled <- pca_biplot(data = dat,
                                 center_data = TRUE,
                                 scale_data = FALSE,
                                 chart_title = "Iris data",
                                 limits_nudge_y = 0,
                                 data_projection = "pc_scores_scaled",
                                 variable_projection = "axes",
                                 arrow_labels = TRUE)

grid.arrange(loadings_scores$biplot, axes_scores$biplot,
             loadings_scores_scaled$biplot, axes_scores_scaled$biplot,
             nrow = 2,
             ncol = 2)

# Here is a single example of making a biplot from the included team_shooting_mat dataset.

library(ggplot2)
library(ggrepel)
library(grid)
library(gridExtra)
library(biplotr)

# pca_biplot returns a ggplot object
chart <- pca_biplot(
  # The data matrix
  data = team_shooting_mat,

  # Add a custom title
  chart_title = "NBA Team Shooting 2018",

  # Increase the x axis limits by 1 in + and - directions
  limits_nudge_x = 1,

  # Center the data (important for PCA)
  center_data = TRUE,
  # Scale the data (since some of our variables have much higher magnitude than others)
  scale_data = TRUE,

  # Show point labels
  point_labels = TRUE,
  # Push the labels 0.35 units on the y axis
  point_labels_nudge_y = 0.35,

  # Show arrow labels
  arrow_labels = TRUE,
  # Push arrow labels away from arrow heads by 0.35 units
  arrow_labels_nudge_y = 0.35
)

# Draw the plot
grid.arrange(chart$biplot)
}
